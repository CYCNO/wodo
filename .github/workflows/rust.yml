name: Build & Release

# only run on tags (so you publish a release by creating a tag)
on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write   # allow creating releases

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            ext: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: tar.gz

    steps:
      - uses: actions/checkout@v4

      # Install Rust + required target(s)
      - name: Install Rust toolchain and add target
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      # (linux-musl needs musl toolchain on runner)
      - name: Prepare musl (Ubuntu only)
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build (release)
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # On Windows runner (this step will run on the windows runner and use bash there),
            # copy executable and zip it:
            cp target/${{ matrix.target }}/release/wodo.exe artifacts/wodo-${{ matrix.target }}.exe
            powershell -Command "Compress-Archive -Path artifacts/wodo-${{ matrix.target }}.exe -DestinationPath artifacts/wodo-${{ matrix.target }}.zip"
            rm artifacts/wodo-${{ matrix.target }}.exe
          else
            cp target/${{ matrix.target }}/release/wodo artifacts/
            tar -czf artifacts/wodo-${{ matrix.target }}.tar.gz -C artifacts wodo
            rm artifacts/wodo
          fi

      - name: Create checksums
        run: |
          sha256sum artifacts/* > artifacts/checksums.txt || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wodo-${{ matrix.target }}
          path: artifacts/*

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get all build artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts

      - name: Show artifacts
        run: ls -la artifacts

      - name: Publish GitHub Release and attach files
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
